// nextflow.config

params {

	//general settings
	output_dir = "${projectDir}/results"
	out_dir	= params.output_dir
  output_dir = params.out_dir ?: "${projectDir}/results"	
	
	params.output_dir = params.out_dir ?: "${projectDir}/results"
	meta_file	= 'meta_data/meta_sheet.csv'	// sample file with header having sampleId, file_name...
	params.sample_sheet = params.sample_sheet ?: params.meta_file
	basecaller	= 'Dorado'		// availabel ['Dorado', 'Guppy']
	rawfile_type	= 'fastq'		// available ['fastq', 'fast5_pod5']
	rawfile_dir	=  "${baseDir}/test_data/fastq_pass"
	fastq_dir	= 'raw_files/fastq'
	primer_schema	= "${projectDir}/meta_data/primer-schemes"
	kit_name	= 'EXP-NBD196' // for multipel kit_name use this format '"EXP-NBD104 EXP-NBD114"'
	fq_extension	= '.fastq'
	script		= 'scripts'
	threads		= 5 			// number of cpus to use (for medaka, samtools, minimap2 etc)
	run_name = "test_run" //null

	basecaller_dir = null //'/home3/sk312p/task_dir/tools/dorado-0.4.3-linux-x64/'
	model_dir = null //'/home3/sk312p/task_dir/tools/dorado-0.4.3-linux-x64/models // use only for Dorado, ignore for Guppy
	basecaller_config = 'dna_r10.4.1_e8.2_400bps_fast@v4.2.0'
	run_mode = 'cuda:all'
	basecaller_threads = 5 // use only for Guppy, ignore for Dorado


	//// dorado setting
	//dorado_dir	= '/home3/sk312p/task_dir/tools/dorado-0.4.3-linux-x64'
	//dorado_model_path = '/home3/sk312p/task_dir/tools/dorado-0.4.3-linux-x64/models'
	//dorado_config	= 'dna_r9.4.1_e8_fast@v3.4'
	////dorado_config	= 'dna_r10.4.1_e8.2_400bps_fast@v4.2.0'
	//dorado_run_mode	= 'cuda:0'

	////guppy settings
	//guppy_dir	= '/home3/sk312p/task_dir/tools/ont-guppy'
	//guppy_config	= 'dna_r9.4.1_450bps_fast.cfg'	// change according to your data
	//guppy_cpu_threads	= 4
	//guppy_run_mode	= 'cuda:all' 			// use 'cuda:0' for single device

	// guppy plex setting
	seq_len		= 350

	//medaka settings
	medaka_model	= 'r941_min_fast_g303'
	medaka_normalise	= 200		//default value by medaka
	mask_depth 	= 20
}

conda.enabled = true
docker.enabled = true
//docker.runOptions = "-v$PWD:$PWD -w $PWD" //"-v ${baseDir}:${baseDir}"
docker.temp = 'auto'

executor {
  name		= 'local'
  queueSize	= 2 // Limits the executor to run one process at a time
}

def arch_type = System.getProperty('os.arch').toLowerCase()

def docker_image_type() {
		def architecture = System.getProperty('os.arch').toLowerCase()
    if (architecture =="aarch64" || architecture == "arm64") {
        return 'rage2025/artic-nf-arm64:v1.0'
    }
    else if (architecture == "amd64" || architecture == "x86_64") {
        return 'rage2025/artic-nf-amd64:v1.0'
    }
    else {
        throw new RuntimeException("Unsupported architecture: " + architecture)
    }
}

params.arch_type = arch_type
def container_name = docker_image_type()

profiles {
		standard {
			process.container = container_name
		}
    docker {
        process {
            withName: PLEX_FQ_FILES {
                container = container_name
            }
            withName: PLEX_DIRS {
                container = container_name
            }
            withName: MINIMAP2 {
                container = container_name
            }
            withName: ALIGN_TRIM_1 {
                container = container_name
            }
            withName: ALIGN_TRIM_2 {
                container = container_name
            }
            withName: MEDAKA_1 {
                container = container_name
            }
            withName: MEDAKA_2 {
                container = container_name
            }
            withName: MEDAKA_SNP_1 {
                container = container_name
            }
            withName: MEDAKA_SNP_2 {
                container = container_name
            }
            withName: VCF_MERGE {
                container = container_name
            }
            withName: LONGSHOT {
                container = container_name
            }
            withName: VCF_FILTER {
                container = container_name
            }
            withName: MAKE_DEPTH_MASK {
                container = container_name
            }
            withName: MASK {
                container = container_name
            }
            withName: BCFTOOLS_CONSENSUS {
                container = container_name
            }
            withName: FASTA_HEADER {
                container = container_name
            }
            withName: CONCAT_FOR_MUSCLE {
                container = container_name
            }
            withName: MUSCLE {
                container = container_name
            }
            withName: CONCAT {
                container = container_name
            }
            withName: MAFFT {
                container = container_name
            }
            withName: SUMMARY_STATS {
                container = container_name
            }
	    			withName: REPORT {
								container = container_name
	    			}
        }
    }
}

manifest {

    name	= 'RAGE-toolkit/Artic-nf-GUI'
    author	= 'RAGE-toolkit'
    homePage	= 'https://github.com/RAGE-toolkit/Artic-nf-GUI'
    description	= 'Basecalling and consensus sequence generation'
    mainScript	= 'main.nf'
    nextflowVersion	= '23.10.0'
    version	= 'v1.0.0'
}
