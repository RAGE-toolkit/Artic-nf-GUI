// modules/align_trim-1.nf
process ALIGN_TRIM_1 {

  tag { sampleId }

  publishDir "${params.out_dir}/medaka", mode: 'copy'

  input:
    path input_bam
		path align_trim
		path bed
    tuple val(sampleId), val(item), val(scheme), val(version)

  output:
    path "${params.run_name}_${sampleId}.alignreport.txt",         emit: align_report
    path "${params.run_name}_${sampleId}.trimmed.rg.sorted.bam",   emit: trimmed_bam
    path "${params.run_name}_${sampleId}.trimmed.rg.sorted.bam.bai", emit: trimmed_bai

  errorStrategy 'terminate'   // (use 'ignore' if you must, but it's better to fail loudly)

  script:

    if( !bed.exists() )
      exit 1, "ALIGN_TRIM_1: Scheme BED not found: ${bed}"
    if( !align_trim.exists() )
      exit 1, "ALIGN_TRIM_1: align_trim.py not found: ${align_trim}"

    """
    set -euo pipefail

    python "${align_trim}" --normalise ${params.medaka_normalise} "${bed}" --start \
      --report "${params.run_name}_${sampleId}.alignreport.txt" \
      < "${input_bam}" \
      2> "${params.run_name}_${sampleId}.alignreport.err" \
    | samtools sort -T "${sampleId}" -o "${params.run_name}_${sampleId}.trimmed.rg.sorted.bam"

    samtools index "${params.run_name}_${sampleId}.trimmed.rg.sorted.bam"
    """
}

